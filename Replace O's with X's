class Solution:
    def fill(self, grid):
        from itertools import chain, product
        m, n = len(grid), len(grid[0])
    def neighbors(x, y):
            if x > 0:
                yield (x - 1, y)
            if (x1 := x + 1) < m:
                yield (x1, y)
            if y > 0:
                yield (x, y - 1)
            if (y1 := y + 1) < n:
                yield (x, y1)
                
        visited = [[False] * n for _ in range(m)]
        q = []
        for x, y in chain(
            product(range(m), [0, n - 1]),
            product([0, m - 1], range(1, n - 1))
        ):
            if grid[x][y] == "O":
                visited[x][y] = True
                q.append((x, y))
        while q:
            x, y = q.pop()
            for nx, ny in neighbors(x, y):
                if grid[nx][ny] == "O" and not visited[nx][ny]:
                    visited[nx][ny] = True
                    q.append((nx, ny))
        for x, y in product(range(m), range(n)):
            if grid[x][y] == "O" and not visited[x][y]:
                grid[x][y] = "X"
