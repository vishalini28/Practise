from os import *
from sys import *
from collections import *
from math import *




def isLowerPrecedence(ops1, ops2):
    
    # Check whether ops1 has lower precedence than ops2.
    if((ops1 == '+' or ops1 == '-') and (ops2 == '*' or ops2 == '/')):
        return True

    return False


def evaluateArithmeticExpression(expression):
    stk = []

    postfixExp = ""
    operand = ""

    # Convert given infix expression to postfix/ Reverse Polish Notation.
    for i in range(len(expression)):
        if (expression[i] >= '0' and expression[i] <= '9'):
            
            # Append digit to operand.
            operand += expression[i]
            continue

        if (operand != ""):
            
            # Append operand in string 'postfix'
            postfixExp += operand
            postfixExp += ' '
            operand = ""

        if (expression[i] == '('):
            
            # Push opening bracket
            stk.append('(')
        
        elif (expression[i] == ')'):
            
            # Append operators between current paranthesis pair in string postfixExp and discard paranthesis.
            while (stk[-1] != '('):
                postfixExp += stk[-1]
                stk.pop()
            stk.pop()
        
        else:
            while (stk[-1] != '(' and isLowerPrecedence(expression[i], stk[-1]) == False):
                
                # Pop operator with greater or equal precedence.
                postfixExp += stk[-1]
                stk.pop()

            # Add operator to top of stack.
            stk.append(expression[i])

    values = []
    operand = ""

    # Evaluating equivalent postfix expression.
    for i in range(len(postfixExp)):
        if (postfixExp[i] >= '0' and postfixExp[i] <= '9'):
            
            # Append digit to operand.
            operand += postfixExp[i]
        
        elif (postfixExp[i] == ' '):
            
            # Push operand in stack 'values'.
            values.append(int(operand))
            operand = ""
        
        else:
            
            # Pop two operand and push their result after applying operator back to the stack 'values'.
            operand2 = values[-1]
            values.pop()
            operand1 = values[-1]
            values.pop()
            if (postfixExp[i] == '+'):
                values.append(operand1 + operand2)
            
            if (postfixExp[i] == '-'):
                values.append(operand1 - operand2)
            
            if (postfixExp[i] == '*'):
                values.append(operand1 * operand2)
            
            if (postfixExp[i] == '/'):
                values.append(int(operand1 / operand2))

    # Result of Expression
    return values[-1]
    # Write your code here
    pass
